"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3970],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),l=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=l(r),g=n,f=h["".concat(c,".").concat(g)]||h[g]||u[g]||a;return r?o.createElement(f,i(i({ref:t},p),{},{components:r})):o.createElement(f,i({ref:t},p))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},1262:(e,t,r)=>{r.d(t,{Z:()=>a});var o=r(7294),n=r(2263);const a=function(e){var t=e.children,r=e.fallback;return(0,n.Z)().isClient&&null!=t?o.createElement(o.Fragment,null,t()):r||null}},1144:(e,t,r)=>{r.d(t,{M:()=>a});var o=r(7294),n=r(1262),a=function(e){return function(e){if(null==e)throw new TypeError("Cannot destructure undefined")}(e),o.createElement(n.Z,null,(function(){return o.createElement("div",{class:"update-request"},o.createElement("a",{href:"https://https://github.com/zeroone-boa/agora-cl-docs/issues/new?title=Docs update request: "+new URL(window.location.href).pathname+"&body=Source: "+window.location.href+"%0A%0ARequest: (how can we help?)"},"\ud83d\udc3c Request an update"))}))}},2178:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>l,default:()=>g,frontMatter:()=>c,metadata:()=>p,toc:()=>u});var o=r(7462),n=r(3366),a=(r(7294),r(3905)),i=r(1144),s=["components"],c={id:"bls-cryptography",title:"BLS cryptography",sidebar_label:"BLS cryptography"},l=void 0,p={unversionedId:"how-agora-cl-works/bls-cryptography",id:"how-agora-cl-works/bls-cryptography",isDocsHomePage:!1,title:"BLS cryptography",description:"A major obstacle for Ethereum in the effort to move into a Proof-of -Stake model was verifying cryptographic signatures efficiently enough to reach scalability expectations; for this task, Boneh-Lynn-Shacham signatures \\(BLS\\) were chosen.",source:"@site/docs/how-agora-cl-works/bls-signature-aggregation-and-cryptography.md",sourceDirName:"how-agora-cl-works",slug:"/how-agora-cl-works/bls-cryptography",permalink:"/docs/how-agora-cl-works/bls-cryptography",editUrl:"https://github.com/zeroone-boa/agora-cl-docs/edit/master/website/docs/how-agora-cl-works/bls-signature-aggregation-and-cryptography.md",version:"current",frontMatter:{id:"bls-cryptography",title:"BLS cryptography",sidebar_label:"BLS cryptography"},sidebar:"docs",previous:{title:"P2P networking",permalink:"/docs/how-agora-cl-works/p2p-networking"},next:{title:"End-to-end tests",permalink:"/docs/devtools/end-to-end"}},u=[{value:"How does it work?",id:"how-does-it-work",children:[]}],h={toc:u};function g(e){var t=e.components,r=(0,n.Z)(e,s);return(0,a.kt)("wrapper",(0,o.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A major obstacle for Ethereum in the effort to move into a ",(0,a.kt)("a",{parentName:"p",href:"/docs/terminology#proof-of-stake-pos"},"Proof-of -Stake")," model was verifying cryptographic signatures efficiently enough to reach scalability expectations; for this task, ",(0,a.kt)("strong",{parentName:"p"},"Boneh-Lynn-Shacham signatures ","(","BLS",")")," were chosen."),(0,a.kt)("p",null,"BLS allows for efficient signature aggregation and verification at scale using ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Elliptic-curve_cryptography"},"Elliptic Curve cryptography"),". It was originally popularised within the tech community by the ",(0,a.kt)("a",{parentName:"p",href:"https://dfinity.org/"},"Dfinity Project"),", whom utilised BLS to create a source of distributed randomness through a mechanism called \u201cthreshold relaying\u201d."),(0,a.kt)("p",null,"\0The BLS specification used by Ethereum can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ethereum/eth2.0-specs/blob/dev/specs/bls_signature.md"},"official specifications repository.")),(0,a.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,a.kt)("p",null,"As mentioned, Ethereum uses the BLS signature scheme to facilitate secure cryptography within the protocol. This method allows ",(0,a.kt)("a",{parentName:"p",href:"/docs/terminology#validator"},"validators")," to sign messages, and these resulting signatures are then aggregated and verified at scale. This enables a full ",(0,a.kt)("a",{parentName:"p",href:"/docs/terminology#proof-of-stake-pos"},"Proof-of-Stake")," system with a massive number of ",(0,a.kt)("a",{parentName:"p",href:"/docs/terminology#validator"},"validators")," to function efficiently in production."),(0,a.kt)("p",null,"Prysm utilises a pure Go BLS ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/phoreproject/bls"},"implementation")," for this initial testnet release. However, due to efficiency concerns, it will be replaced by a more performant implementation in the upcoming release ","(","likely in C++",")","."),(0,a.kt)("p",null,"Prysm contains the following public BLS API which can be used across the project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Signature) Verify(msg []byte, pub *PublicKey, domain uint64) bool\nfunc (s *SecretKey) Sign(msg []byte, domain uint64) *Signature\nfunc (s *Signature) VerifyAggregate(pubKeys []*PublicKey, msg []byte, domain uint64) bool\nfunc AggregateSignatures(sigs []*Signature) *Signature\n")),(0,a.kt)(i.M,{docTitle:"BLS cryptography",mdxType:"RequestUpdateWidget"}))}g.isMDXComponent=!0}}]);